# -*- coding: utf-8 -*-
"""ShinyApp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZXFhFjiWakZNyDYeEPTOBRxf6dJJCsN4

Set Up
"""

#SAM
!pip install git+https://github.com/facebookresearch/segment-anything.git
#Transformers
!pip install -q git+https://github.com/huggingface/transformers.git
#Datasets to prepare data and monai if you want to use special loss functions
!pip install datasets
!pip install -q monai
#Patchify to divide large images into smaller patches for training. (Not necessary for smaller images)
!pip install patchify
!pip install shiny torch torchvision pillow

pip install tifffile

import torch
import os
import io
from patchify import patchify  #Only to handle large images
from torch.utils.data import DataLoader, Dataset
from google.colab import drive
from torchvision import transforms
from PIL import Image
from shiny import App, ui, reactive, render
from FinetuneSAM import SAMModel

#connect to the shared drive from the professor
drive.mount('/content/drive')

model = SAMModel()
model.load_state_dict(torch.load('/content/drive/MyDrive/sidewalks_model.pth', map_location=torch.device('cpu')))
model.eval()

app_ui = ui.page_fluid(

    ui.input_file('file_input', 'Upload Tile Image'),
    ui.output_image('output_image'),
    ui.output_text('segmentation_results')
)

def server(input, output, session):

  @reactive.Calc
  def loadImage():

    file = input.file_input()
    if file:
      imageData = file['content']
      img = Image.open(io.BytesIO(imageData)).convert('RGB')

      return img

  return None


  @reactive.Effect
  def perform_segmentation():

    image = loadImage()
    if image is not None:

      transform = transforms.Compose([
          #resizing
          transforms.Resize((256, 256)),
          #converting to tensor
          transforms.ToTensor(),
      ])

      iTensor = transform(image).unsqueeze(0)

      with torch.no_grad():

        pred = model(iTensor)

      output.output_image.set(f"Original Image: {image}")
      output.segmentation_results.set(f"Segmentation Results: {pred}")

app = App(app_ui, server)